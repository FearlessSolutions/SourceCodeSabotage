Challenge 1)  “Time to hello world: an engineer’s first step as a programmer”
Most tutorials you see when trying to learn to program start with you just doing a simple task.  Have an output of hello world.  Time to hello world or TTHW is the time it takes to write “Hello World”.  In python it is as simple as print(“Hello World”) or in other languages you might have to import a library, create a class, set a variable, hit a punch card, it really depends on what you are using.  For the most part though printing “Hello World” on a screen is one of the most straightforward task you can do as a developer.  However we are not your normal developers, we are a bunch of experienced devs who have seen things break for no reason, things not be future proofed, things that didn’t take what some jerk QA would think of to break your app into consideration.  We are better than that, we are going to make this 100% work all the time, except for the obvious inefficiencies and dubious checks that will sometimes cause this to fail because we forgot the most simple rule in programing, “Keep it simple stupid”.
Scenario:
You at your current level as a dev decided that now that my student loan debt was forgiven is willing to spend 10k  on new and exciting programming classes at the very prestigious university of “NotAScam Technical Institute of American University College Finishing School LLC”.  This wonderful and legitimate warehouse under  the exit ramp from Baltimore to 83, promises you an amazing job that will earn you in their own words, amazing dollar bucks.  However, after giving them you deposit and sitting at your desk you realize your final given to you on day 1 is to on anything from ranging to a console, or a basic UI, have the message “Hello World” * the amount of times you input.  Now since you are still not aware this is clearly a scam, but also that you are an amazing developer, you want to impress your teacher to earn those dollar bucks.  You are going to create a sophisticated amazing application to out do all of your peers and get their dollar bucks too.
Task:
User will input a number into a console, or a UI, or whatever, a display a message of “Hello World” that many times.  
Rules:
All functions must be practical to the task.  If a function does not actually add some value to the task it is not considered part of the application to be judged.
Example, you have a task that is to change the font color of a web page.  You write an API that generates a random number that isn’t being used in the site, anywhere, but is just called adds zero value.  However if you wrote an api that generates a random number between 0 and 255, call that three times , checks to see if the values are a real number,  have that go into another function that creates an RGB, and then changes the color of the text based on that, that is a perfectly good representation of the task.
Copying things on the internet is allowed, we are developers, google and stack overflow is about 90% of the job.
It must work.  I’m not QAing it but I would like it if the application worked as intended.  Overengineering can cause a lot of bugs, and cause things to not work, so this a possibility, but I want it to at least work once.


To Submit you work create new folder in this directory and put your code in there.  Fork the branch and request a merge